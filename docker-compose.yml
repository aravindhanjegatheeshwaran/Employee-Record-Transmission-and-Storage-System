version: '3.8'

services:
  server:
    build:
      context: .
      dockerfile: dockerfile-server
    ports:
      - "8000:8000"
    depends_on:
      - db
      - kafka
    environment:
      - DB_HOST=db
      - DB_PORT=3306
      - DB_USER=root
      - DB_PASSWORD=happy
      - DB_NAME=employee_records
      - DATABASE_URL=mysql+aiomysql://root:happy@db:3306/employee_records
      - SECRET_KEY=${SECRET_KEY:-your-secret-key-for-jwt}
      - DEBUG=False
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - KAFKA_TOPIC=employee-records
    volumes:
      - ./server:/app
    restart: unless-stopped

  client:
    build:
      context: .
      dockerfile: dockerfile-client
    environment:
      - SERVER_URL=http://server:8000
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - KAFKA_TOPIC=employee-records
      - WS_URL=ws://server:8000/ws
      - COMM_MODE=${COMM_MODE:-http}
    depends_on:
      - server
      - kafka
    restart: on-failure

  db:
    image: mysql:8.0
    ports:
      - "3306:3306"
    environment:
      - MYSQL_ROOT_PASSWORD=happy
      # Don't specify MYSQL_DATABASE here so our script can create it
    volumes:
      - mysql_data:/var/lib/mysql
    command: --default-authentication-plugin=mysql_native_password
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-phappy"]
      interval: 5s
      timeout: 5s
      retries: 10
      
  zookeeper:
    image: wurstmeister/zookeeper:3.4.6
    ports:
      - "2181:2181"
    restart: unless-stopped
    
  kafka:
    image: wurstmeister/kafka:2.13-2.8.1
    ports:
      - "9092:9092"
    environment:
      KAFKA_ADVERTISED_HOST_NAME: kafka
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_CREATE_TOPICS: "employee-records:1:1"
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      - zookeeper
    restart: unless-stopped

volumes:
  mysql_data: